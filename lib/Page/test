import 'package:color_blast/Model/data_manager.dart';
import 'package:color_blast/Model/planning.dart';
import 'package:color_blast/Service/service_planning.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:table_calendar/table_calendar.dart';
import 'package:intl/date_symbol_data_local.dart';

class PlanningPage extends StatefulWidget {
  const PlanningPage({Key? key}) : super(key: key);

  @override
  State<PlanningPage> createState() => _PlanningPageState();
}

class _PlanningPageState extends State<PlanningPage> {
  CalendarFormat _calendarFormat = CalendarFormat.month;
  DateTime _selectedDay = DateTime.now();
  DateTime _focusedDay = DateTime.now();
  List<Planning?>? planning = [];

  @override
  void initState() {
    super.initState();
    initializeDateFormatting('fr_FR', null);
    getPlanning();
  }

  Future<void> getPlanning() async {
    planning = await ServicePlanning().getPlanningByIdClient(DataManager().client?.id);

  }

  // Méthode pour déterminer si une date appartient à un planning
  bool _isDateInPlanning(DateTime date) {
    if (planning == null) return false;
    for (var plan in planning!) {
      if (date.isAfter(plan!.ddate) && date.isBefore(plan.fdate)) {
        return true;
      }
    }
    return false;
  }

  // Méthode pour déterminer si une date est la date d'aujourd'hui
  bool _isToday(DateTime date) {
    final now = DateTime.now();
    return date.day == now.day && date.month == now.month && date.year == now.year;
  }

  // Méthode pour afficher une notification en bas de l'écran
  void _showSnackbar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        duration: Duration(seconds: 1),
        backgroundColor: Colors.orange,
      ),
    );
  }

  // Méthode pour obtenir le style du cercle pour la date spécifiée
  // avec un cercle rouge si le planning est inactif, sinon bleu
  Widget _getCircleMarkerBuilder(BuildContext context, DateTime date, List<dynamic> events) {
    if (!_isDateInPlanning(date)) return Container();

    final planningForDate = planning!.firstWhere((plan) {
      return date.isAfter(plan!.ddate) && date.isBefore(plan.fdate);
    });

    return Container(
      width: 6,
      height: 6,
      decoration: BoxDecoration(
        shape: BoxShape.circle,
        color: planningForDate!.actif ? Colors.blue : Colors.red,
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Votre planning"),
        flexibleSpace: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [
                Colors.deepOrange,
                Colors.orange,
                Colors.orangeAccent,
              ],
            ),
          ),
        ),
      ),
      body: Column(
        children: [
          TableCalendar(
            firstDay: DateTime.utc(2021, 1, 1),
            lastDay: DateTime.utc(2023, 12, 31),
            focusedDay: _focusedDay,
            selectedDayPredicate: (day) {
              return _isDateInPlanning(day);
            },
            calendarBuilders: CalendarBuilders(
              markerBuilder: (context, date, events) => _getCircleMarkerBuilder(context, date, events),
            ),
            onDaySelected: (selectedDay, focusedDay) {
              setState(() {
                _selectedDay = selectedDay;
                _focusedDay = focusedDay;
              });

              if (_isDateInPlanning(selectedDay)) {
                _showSnackbar("Planning sélectionné !");
              }
            },
          ),
        ],
      ),
    );
  }
}
