import 'package:flutter/material.dart';
import 'package:multiselect_formfield/multiselect_formfield.dart';
import 'package:intl/intl.dart';
import 'package:table_calendar/table_calendar.dart';

import '../Model/client.dart';
import '../Model/data_manager.dart';
import '../Model/planning.dart';
import '../Model/product.dart';
import '../Service/service_planning.dart';
import '../Service/service_product.dart';


class TakeMeetPage extends StatefulWidget {
  const TakeMeetPage({Key? key}) : super(key: key);

  @override
  State<TakeMeetPage> createState() => _TakeMeetPageState();
}

class _TakeMeetPageState extends State<TakeMeetPage> {
  Client? client = DataManager().client;
  List<DateTimeRange> _selectedDateRanges = [];
  TextEditingController _firstNameController = TextEditingController();
  TextEditingController _lastNameController = TextEditingController();
  TextEditingController _villeController = TextEditingController();
  TextEditingController _adresseController = TextEditingController();
  TextEditingController _surfaceController = TextEditingController();
  bool _isOutdoorSelected = false;
  bool _isIndoorSelected = false;
  bool _isLoadingProducts = true;
  DateTime? _selectedDay; // Nouvelle variable pour stocker la date sélectionnée.
  List<Product> _selectedProducts = [];
  List<Product?>? products = [];

  @override
  void initState() {
    super.initState();
    _firstNameController.text = client?.firstname ?? "";
    _lastNameController.text = client?.lastname ?? "";
    _villeController.text = client?.city ?? "";
    _adresseController.text = client?.address ?? "";
    getProduct();
  }

  @override
  void dispose() {
    _firstNameController.dispose();
    _lastNameController.dispose();
    _adresseController.dispose();
    _villeController.dispose();
    _surfaceController.dispose();
    super.dispose();
  }

  Future<void> getProduct() async {
    products = await ServiceProduct().getProductsByCategories(["EXTERN", "INTERN"]);
    setState(() {
      _isLoadingProducts = false;
    });
  }


  void getDevis() {
    print("nom " + _lastNameController.text);
    print("prénom " + _firstNameController.text);
    print("ville " + _villeController.text);
    print("adresse " + _adresseController.text);
    print("surface " + _surfaceController.text);
    print("intérieur " + _isIndoorSelected.toString());
    print("extérieur " + _isOutdoorSelected.toString());
    for (var dateRange in _selectedDateRanges) {
      print("Date de début: ${DateFormat('dd/MM/yyyy').format(dateRange.start)}");
      print("Date de fin: ${DateFormat('dd/MM/yyyy').format(dateRange.end)}");
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Informations Rendez-vous"),
        flexibleSpace: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [
                Colors.deepOrange,
                Colors.orange,
                Colors.orangeAccent,
              ],
            ),
          ),
        ),
      ),
      body: SingleChildScrollView(
        child: Padding(
          padding: EdgeInsets.all(10.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  Expanded(
                    child: Align(
                      alignment: Alignment.centerLeft,
                      child: TextField(
                        controller: _firstNameController,
                        decoration: InputDecoration(
                          labelText: 'Votre nom:',
                          labelStyle: TextStyle(
                            fontWeight: FontWeight.bold,
                            decoration: TextDecoration.underline,
                            color: Colors.black,
                          ),
                        ),
                        style: TextStyle(
                          fontWeight: FontWeight.normal,
                          decoration: TextDecoration.none,
                        ),
                      ),
                    ),
                  ),
                  Expanded(
                    child: Align(
                      alignment: Alignment.centerLeft,
                      child: TextField(
                        controller: _lastNameController,
                        decoration: InputDecoration(
                          labelText: 'Votre Prénom:',
                          labelStyle: TextStyle(
                            fontWeight: FontWeight.bold,
                            decoration: TextDecoration.underline,
                            color: Colors.black,
                          ),
                        ),
                        style: TextStyle(
                          fontWeight: FontWeight.normal,
                          decoration: TextDecoration.none,
                        ),
                      ),
                    ),
                  ),
                ],
              ),
              SizedBox(height: 25),
              Row(
                children: [
                  Expanded(
                    child: Align(
                      alignment: Alignment.centerLeft,
                      child: TextField(
                        controller: _villeController,
                        decoration: InputDecoration(
                          labelText: 'Votre ville:',
                          labelStyle: TextStyle(
                            fontWeight: FontWeight.bold,
                            decoration: TextDecoration.underline,
                            color: Colors.black,
                          ),
                        ),
                        style: TextStyle(
                          fontWeight: FontWeight.normal,
                          decoration: TextDecoration.none,
                        ),
                      ),
                    ),
                  ),
                  Expanded(
                    child: Align(
                      alignment: Alignment.centerLeft,
                      child: TextField(
                        controller: _adresseController,
                        decoration: InputDecoration(
                          labelText: 'Votre Adresse:',
                          labelStyle: TextStyle(
                            fontWeight: FontWeight.bold,
                            decoration: TextDecoration.underline,
                            color: Colors.black,
                          ),
                        ),
                        style: TextStyle(
                          fontWeight: FontWeight.normal,
                          decoration: TextDecoration.none,
                        ),
                      ),
                    ),
                  ),
                ],
              ),
              SizedBox(height: 25),
              Row(
                children: [
                  Checkbox(
                    value: _isOutdoorSelected,
                    onChanged: (value) {
                      setState(() {
                        _isOutdoorSelected = value!;
                      });
                    },
                  ),
                  Text('Extérieur'),
                  SizedBox(width: 20),
                  Checkbox(
                    value: _isIndoorSelected,
                    onChanged: (value) {
                      setState(() {
                        _isIndoorSelected = value!;
                      });
                    },
                  ),
                  Text('Intérieur'),
                ],
              ),
              SizedBox(height: 25),
              Row(
                children: [
                  Text('Surface:'),
                  SizedBox(width: 10),
                  Container(
                    width: 120,
                    child: TextField(
                      controller: _surfaceController,
                      keyboardType: TextInputType.number,
                      textInputAction: TextInputAction.none,
                      decoration: InputDecoration(
                        hintText: 'Entrez la surface',
                      ),
                      style: TextStyle(fontSize: 14),
                    ),
                  ),
                  SizedBox(width: 10),
                  Text('m²'),
                ],
              ),
              SizedBox(height: 25),
              if (_isLoadingProducts)
                CircularProgressIndicator(), // Affichez le spinner si les produits sont en cours de chargement

              if (!_isLoadingProducts) // Affichez le formulaire lorsque les produits sont chargés
                MultiSelectFormField(
                  title: Text('Sélectionnez des produits'),
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Veuillez sélectionner au moins un élément';
                    }
                    return null;
                  },
                  dataSource: products != null
                      ? products
                      ?.where((product) {
                    if ((_isOutdoorSelected && _isIndoorSelected) || (!_isOutdoorSelected && !_isIndoorSelected)) {
                      return true;
                    } else if (_isOutdoorSelected) {
                      return product?.category == "EXTERN";
                    } else if (_isIndoorSelected) {
                      return product?.category == "INTERN";
                    }
                    return false;
                  })
                      ?.map((product) => {
                    "display": "${product?.name} - Prix: ${product?.price} €",
                    "value": product,
                  })
                      .toList()
                      : [],
                  textField: 'display',
                  valueField: 'value',
                  okButtonLabel: 'OK',
                  cancelButtonLabel: 'Annuler',
                  initialValue: _selectedProducts,
                  onSaved: (value) {
                    setState(() {
                      _selectedProducts = value.cast<Product>();
                    });
                  },
                ),

              SizedBox(height: 25),
              Row(
                children: [
                  Expanded(
                    child: ElevatedButton(
                      onPressed: () {
                        _selectDateRange(context);
                      },
                      child: Text('Sélectionner une date'),
                      style: ButtonStyle(
                        backgroundColor: MaterialStateProperty.all<Color>(Colors.orangeAccent),
                      ),
                    ),
                  ),
                ],
              ),
              SizedBox(height: 25),
              if (_selectedDateRanges.isNotEmpty)
                Text(
                  'Dates sélectionnées:',
                  style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
                ),
              for (var dateRange in _selectedDateRanges)
                Text(
                  'Date de début: ${DateFormat('dd/MM/yyyy').format(dateRange.start)}\nDate de fin: ${DateFormat('dd/MM/yyyy').format(dateRange.end)}',
                  style: TextStyle(fontSize: 16),
                ),
              SizedBox(height: 25),
              Row(
                children: [
                  Expanded(
                    child: ElevatedButton(
                      onPressed: () {
                        getDevis();
                      },
                      child: Text('Faire un devis'),
                      style: ButtonStyle(
                        backgroundColor: MaterialStateProperty.all<Color>(Colors.orangeAccent),
                      ),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _selectDateRange(BuildContext context) async {
    final initialDate = DateTime.now();
    final newDateRange = await showDateRangePicker(
      context: context,
      firstDate: initialDate,
      lastDate: initialDate.add(Duration(days: 365)), // Permet de sélectionner des dates jusqu'à un an à partir d'aujourd'hui.
      currentDate: _selectedDay,
    );

    if (newDateRange == null) return;

    setState(() {
      _selectedDay = newDateRange.start;
      _selectedDateRanges.add(newDateRange);
    });
  }
}
